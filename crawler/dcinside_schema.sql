-- 디시인사이드 실시간베스트 크롤링을 위한 Oracle DB 스키마

-- 1. 갤러리 정보 테이블
CREATE TABLE DC_GALLERIES (
    GALLERY_ID VARCHAR2(50) PRIMARY KEY,
    GALLERY_NAME VARCHAR2(100) NOT NULL,
    GALLERY_URL VARCHAR2(200) NOT NULL,
    IS_ACTIVE NUMBER(1) DEFAULT 1,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. 게시글 테이블
CREATE TABLE DC_POSTS (
    POST_ID VARCHAR2(50) PRIMARY KEY,
    GALLERY_ID VARCHAR2(50) NOT NULL,
    TITLE VARCHAR2(500) NOT NULL,
    AUTHOR VARCHAR2(100),
    AUTHOR_ID VARCHAR2(50),
    CONTENT CLOB,
    VIEW_COUNT NUMBER DEFAULT 0,
    RECOMMEND_COUNT NUMBER DEFAULT 0,
    COMMENT_COUNT NUMBER DEFAULT 0,
    POST_URL VARCHAR2(500) NOT NULL,
    POST_DATE TIMESTAMP,
    CRAWLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_DC_POSTS_GALLERY FOREIGN KEY (GALLERY_ID) REFERENCES DC_GALLERIES(GALLERY_ID)
);

-- 3. 댓글 테이블
CREATE TABLE DC_COMMENTS (
    COMMENT_ID VARCHAR2(50) PRIMARY KEY,
    POST_ID VARCHAR2(50) NOT NULL,
    PARENT_COMMENT_ID VARCHAR2(50),
    AUTHOR VARCHAR2(100),
    AUTHOR_ID VARCHAR2(50),
    CONTENT CLOB NOT NULL,
    RECOMMEND_COUNT NUMBER DEFAULT 0,
    COMMENT_DATE TIMESTAMP,
    CRAWLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED NUMBER(1) DEFAULT 0,
    CONSTRAINT FK_DC_COMMENTS_POST FOREIGN KEY (POST_ID) REFERENCES DC_POSTS(POST_ID),
    CONSTRAINT FK_DC_COMMENTS_PARENT FOREIGN KEY (PARENT_COMMENT_ID) REFERENCES DC_COMMENTS(COMMENT_ID)
);

-- 4. 실시간베스트 순위 테이블
CREATE TABLE DC_BEST_RANKINGS (
    RANKING_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    GALLERY_ID VARCHAR2(50) NOT NULL,
    POST_ID VARCHAR2(50) NOT NULL,
    RANK_POSITION NUMBER NOT NULL,
    RANK_DATE DATE NOT NULL,
    RANK_TIME VARCHAR2(10) NOT NULL, -- HH:MM 형식
    VIEW_COUNT NUMBER DEFAULT 0,
    RECOMMEND_COUNT NUMBER DEFAULT 0,
    COMMENT_COUNT NUMBER DEFAULT 0,
    CRAWLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_DC_BEST_RANKINGS_GALLERY FOREIGN KEY (GALLERY_ID) REFERENCES DC_GALLERIES(GALLERY_ID),
    CONSTRAINT FK_DC_BEST_RANKINGS_POST FOREIGN KEY (POST_ID) REFERENCES DC_POSTS(POST_ID),
    CONSTRAINT UQ_RANKING UNIQUE (GALLERY_ID, POST_ID, RANK_DATE, RANK_TIME)
);

-- 5. 이미지 정보 테이블 (새로 추가)
CREATE TABLE DC_IMAGES (
    IMAGE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    POST_ID VARCHAR2(50) NOT NULL,
    ORIGINAL_URL VARCHAR2(500) NOT NULL,
    LOCAL_PATH VARCHAR2(500),
    FILE_NAME VARCHAR2(200),
    FILE_SIZE NUMBER,
    FILE_EXTENSION VARCHAR2(10),
    STRATEGY VARCHAR2(20) NOT NULL, -- 'url_only', 'local', 'cloud', 'hybrid'
    IS_IMPORTANT NUMBER(1) DEFAULT 0,
    PROCESSED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_ACCESSIBLE NUMBER(1) DEFAULT 1,
    CONSTRAINT FK_DC_IMAGES_POST FOREIGN KEY (POST_ID) REFERENCES DC_POSTS(POST_ID)
);

-- 6. 크롤링 로그 테이블
CREATE TABLE DC_CRAWLING_LOGS (
    LOG_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    GALLERY_ID VARCHAR2(50),
    CRAWL_TYPE VARCHAR2(20) NOT NULL, -- 'BEST', 'POST', 'COMMENT', 'IMAGE'
    STATUS VARCHAR2(20) NOT NULL, -- 'SUCCESS', 'FAILED', 'PARTIAL'
    ITEMS_PROCESSED NUMBER DEFAULT 0,
    ITEMS_FAILED NUMBER DEFAULT 0,
    ERROR_MESSAGE CLOB,
    START_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    END_TIME TIMESTAMP,
    DURATION_SECONDS NUMBER
);

-- 7. 인덱스 생성
-- 게시글 관련 인덱스
CREATE INDEX IDX_DC_POSTS_GALLERY ON DC_POSTS(GALLERY_ID);
CREATE INDEX IDX_DC_POSTS_DATE ON DC_POSTS(POST_DATE);
CREATE INDEX IDX_DC_POSTS_CRAWLED ON DC_POSTS(CRAWLED_AT);
CREATE INDEX IDX_DC_POSTS_URL ON DC_POSTS(POST_URL);

-- 댓글 관련 인덱스
CREATE INDEX IDX_DC_COMMENTS_POST ON DC_COMMENTS(POST_ID);
CREATE INDEX IDX_DC_COMMENTS_PARENT ON DC_COMMENTS(PARENT_COMMENT_ID);
CREATE INDEX IDX_DC_COMMENTS_DATE ON DC_COMMENTS(COMMENT_DATE);

-- 실시간베스트 순위 인덱스
CREATE INDEX IDX_DC_BEST_RANKINGS_GALLERY_DATE ON DC_BEST_RANKINGS(GALLERY_ID, RANK_DATE);
CREATE INDEX IDX_DC_BEST_RANKINGS_POST ON DC_BEST_RANKINGS(POST_ID);
CREATE INDEX IDX_DC_BEST_RANKINGS_POSITION ON DC_BEST_RANKINGS(RANK_POSITION);

-- 이미지 관련 인덱스 (새로 추가)
CREATE INDEX IDX_DC_IMAGES_POST ON DC_IMAGES(POST_ID);
CREATE INDEX IDX_DC_IMAGES_URL ON DC_IMAGES(ORIGINAL_URL);
CREATE INDEX IDX_DC_IMAGES_STRATEGY ON DC_IMAGES(STRATEGY);
CREATE INDEX IDX_DC_IMAGES_IMPORTANT ON DC_IMAGES(IS_IMPORTANT);

-- 크롤링 로그 인덱스
CREATE INDEX IDX_DC_CRAWLING_LOGS_GALLERY ON DC_CRAWLING_LOGS(GALLERY_ID);
CREATE INDEX IDX_DC_CRAWLING_LOGS_TIME ON DC_CRAWLING_LOGS(START_TIME);
CREATE INDEX IDX_DC_CRAWLING_LOGS_STATUS ON DC_CRAWLING_LOGS(STATUS);

-- 8. 기본 갤러리 데이터 삽입
INSERT INTO DC_GALLERIES (GALLERY_ID, GALLERY_NAME, GALLERY_URL) VALUES
('hit', '실시간베스트', 'https://gall.dcinside.com/board/lists/?id=hit'),
('humor', '유머', 'https://gall.dcinside.com/board/lists/?id=humor'),
('news', '뉴스', 'https://gall.dcinside.com/board/lists/?id=news'),
('game', '게임', 'https://gall.dcinside.com/board/lists/?id=game'),
('sports', '스포츠', 'https://gall.dcinside.com/board/lists/?id=sports'),
('entertainment', '연예', 'https://gall.dcinside.com/board/lists/?id=entertainment'),
('politics', '정치', 'https://gall.dcinside.com/board/lists/?id=politics'),
('economy', '경제', 'https://gall.dcinside.com/board/lists/?id=economy');

-- 9. 뷰 생성 (자주 사용되는 쿼리를 위한 뷰)
-- 실시간베스트 통계 뷰
CREATE VIEW V_DC_BEST_STATS AS
SELECT 
    g.GALLERY_NAME,
    p.TITLE,
    p.AUTHOR,
    p.VIEW_COUNT,
    p.RECOMMEND_COUNT,
    p.COMMENT_COUNT,
    br.RANK_POSITION,
    br.RANK_DATE,
    br.RANK_TIME,
    p.POST_URL
FROM DC_BEST_RANKINGS br
JOIN DC_POSTS p ON br.POST_ID = p.POST_ID
JOIN DC_GALLERIES g ON br.GALLERY_ID = g.GALLERY_ID
WHERE br.RANK_DATE = (SELECT MAX(RANK_DATE) FROM DC_BEST_RANKINGS)
ORDER BY g.GALLERY_NAME, br.RANK_POSITION;

-- 갤러리별 게시글 통계 뷰
CREATE VIEW V_DC_GALLERY_STATS AS
SELECT 
    g.GALLERY_NAME,
    COUNT(p.POST_ID) as TOTAL_POSTS,
    AVG(p.VIEW_COUNT) as AVG_VIEWS,
    AVG(p.RECOMMEND_COUNT) as AVG_RECOMMENDS,
    AVG(p.COMMENT_COUNT) as AVG_COMMENTS,
    MAX(p.CRAWLED_AT) as LAST_CRAWL
FROM DC_GALLERIES g
LEFT JOIN DC_POSTS p ON g.GALLERY_ID = p.GALLERY_ID
WHERE p.IS_DELETED = 0
GROUP BY g.GALLERY_ID, g.GALLERY_NAME;

-- 이미지 통계 뷰 (새로 추가)
CREATE VIEW V_DC_IMAGE_STATS AS
SELECT 
    p.POST_ID,
    p.TITLE,
    COUNT(i.IMAGE_ID) as TOTAL_IMAGES,
    COUNT(CASE WHEN i.LOCAL_PATH IS NOT NULL THEN 1 END) as LOCAL_IMAGES,
    COUNT(CASE WHEN i.IS_IMPORTANT = 1 THEN 1 END) as IMPORTANT_IMAGES,
    SUM(i.FILE_SIZE) as TOTAL_SIZE,
    AVG(i.FILE_SIZE) as AVG_SIZE
FROM DC_POSTS p
LEFT JOIN DC_IMAGES i ON p.POST_ID = i.POST_ID
WHERE p.IS_DELETED = 0
GROUP BY p.POST_ID, p.TITLE;

-- 10. 시퀀스 생성 (필요시)
CREATE SEQUENCE SEQ_DC_POST_ID START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE SEQ_DC_COMMENT_ID START WITH 1 INCREMENT BY 1;

-- 11. 권한 설정 (필요시)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_GALLERIES TO your_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_POSTS TO your_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_COMMENTS TO your_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_BEST_RANKINGS TO your_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_IMAGES TO your_user;
-- GRANT SELECT, INSERT, UPDATE, DELETE ON DC_CRAWLING_LOGS TO your_user;
