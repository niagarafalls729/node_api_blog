-- 디시인사이드 실시간베스트 크롤링 - 간소화된 스키마
-- 요구사항: 실시간베스트만, 제목+내용(텍스트+이미지+유튜브), 댓글 제외

-- 1. 게시글 테이블 (핵심 정보만)
CREATE TABLE DC_BEST_POSTS (
    POST_ID VARCHAR2(50) PRIMARY KEY,
    TITLE VARCHAR2(500) NOT NULL,
    AUTHOR VARCHAR2(100),
    CONTENT CLOB,                    -- 텍스트 내용
    POST_URL VARCHAR2(500) NOT NULL,
    POST_DATE TIMESTAMP,
    VIEW_COUNT NUMBER DEFAULT 0,
    CRAWLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 2. 이미지 테이블 (게시글에 포함된 이미지들)
CREATE TABLE DC_POST_IMAGES (
    IMAGE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    POST_ID VARCHAR2(50) NOT NULL,
    IMAGE_URL VARCHAR2(500) NOT NULL,    -- 원본 이미지 URL
    LOCAL_PATH VARCHAR2(500),            -- 로컬 저장 경로 (선택적)
    FILE_NAME VARCHAR2(200),
    FILE_SIZE NUMBER,
    CRAWLED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_DC_IMAGES_POST FOREIGN KEY (POST_ID) REFERENCES DC_BEST_POSTS(POST_ID)
);

-- 3. 인덱스 (성능 최적화)
CREATE INDEX IDX_DC_POSTS_DATE ON DC_BEST_POSTS(POST_DATE);
CREATE INDEX IDX_DC_POSTS_CRAWLED ON DC_BEST_POSTS(CRAWLED_AT);
CREATE INDEX IDX_DC_IMAGES_POST ON DC_POST_IMAGES(POST_ID);


-- 4. 유용한 뷰
CREATE VIEW V_DC_BEST_SUMMARY AS
SELECT 
    p.POST_ID,
    p.TITLE,
    p.AUTHOR,
    p.VIEW_COUNT,
    p.POST_DATE,
    COUNT(i.IMAGE_ID) as IMAGE_COUNT,
    p.POST_URL
FROM DC_BEST_POSTS p
LEFT JOIN DC_POST_IMAGES i ON p.POST_ID = i.POST_ID
GROUP BY p.POST_ID, p.TITLE, p.AUTHOR, p.VIEW_COUNT, p.POST_DATE, p.POST_URL
ORDER BY p.POST_DATE DESC;
